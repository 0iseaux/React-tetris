{"version":3,"sources":["gameHelpers.js","components/styles/StyledTetris.js","tetrominos.js","hooks/useStage.js","components/styles/StyledStage.js","components/styles/StyledCell.js","components/Cell.js","components/Stage.js","components/styles/StyledDisplay.js","components/Display.js","components/styles/StyledStartButton.js","components/StartButton.js","components/styles/StyledScoreBoard.js","components/styles/StyledBackButton.js","components/BackButton.js","components/ScoreTable.js","components/ScoreBoard.js","components/styles/StyledEnterName.js","components/EnterName.js","components/Tetris.js","hooks/usePlayer.js","hooks/useGameStatus.js","hooks/useInterval.js","Routes.js","App.js","index.js","img/bg.png"],"names":["createStage","Array","from","fill","checkCollision","player","stage","moveX","x","moveY","y","tetromino","length","pos","StyledTetrisWrapper","styled","div","bgImage","StyledTetris","TETROMINOS","0","shape","color","I","J","L","O","S","T","Z","randomTetromino","ranTetromino","Math","floor","random","useStage","resetPlayer","useState","setStage","rowsCleared","setRowsCleared","useEffect","updateStage","prevStage","newStage","map","row","cell","forEach","value","collided","reduce","acc","findIndex","prev","unshift","push","sweepRows","StyledStage","props","height","width","StyledCell","type","React","memo","Stage","key","StyledDisplay","gameOver","Display","text","StyledStartButton","button","StartButton","callback","onClick","StyledScoreBoard","StyledScoreTable","StyledBackButton","BackButton","ScoreTable","topScoreBoard","setTopScoreBoard","rank","setRank","makeTwoDigits","n","toString","showRank","ranking","useRoutes","Routes","a","async","fetch","response","json","topScores","console","error","fetchTopScoresData","fetchRank","id","item","index","topPlayer","player_name","score","date_time","className","fullDateTime","date","Date","yr","getFullYear","mth","getMonth","day","getDate","hr","getHours","min","getMinutes","sec","getSeconds","convertDate","href","ScoreBoard","scoreBoard","StyledEnterName","EnterName","useContext","ScoreContext","input","setInput","save","setSave","refPreventFirstFire","useRef","getDateTime","tsNow","now","today","dateTime","log","current","navigate","onSubmit","e","preventDefault","nameScoreTimeToSave","playersName","playersScore","method","headers","body","JSON","stringify","savePlayersName","name","onChange","target","Tetris","dropTime","setDropTime","setGameOver","startPauseResume","setStartPauseResume","resumeDropTime","setResumeDropTime","setPlayer","rotate","matrix","dir","rotatedTetro","_","col","reverse","useCallback","STAGE_WIDTH","state","clonedPlayer","parse","offset","tetromin","usePlayer","updatePlayerPos","playerRotate","setScore","rows","setRows","level","setLevel","linePoints","calcScore","useGameStatus","movePlayer","startGame","pauseGame","resumeGame","drop","move","keyCode","delay","savedCallback","setInterval","clearInterval","useInterval","role","tabIndex","onKeyDown","onKeyUp","Provider","createContext","App","ReactDOM","render","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.b4d02028.chunk.js","sourcesContent":["export const STAGE_WIDTH = 12;\nexport const STAGE_HEIGHT = 20;\n\nexport const createStage = () =>\n    Array.from(Array(STAGE_HEIGHT), () => new Array(STAGE_WIDTH).fill([0, 'clear']));\n\nexport const checkCollision = (player, stage, {x: moveX, y: moveY}) => {\n    for (let y = 0; y < player.tetromino.length; y += 1) {\n        for (let x = 0; x < player.tetromino[y].length; x += 1) {\n            //1. check that we're on an actual tetromino cell\n            if (player.tetromino[y][x] !== 0) {\n                if (\n                    // 2. check our move is inside the game area's height (y)\n                    // we shouldn't go through the bottom of the play area\n                    !stage[y + player.pos.y + moveY] ||\n                    // 3. check that our move is inside the game area's width (x)\n                    !stage[y + player.pos.y + moveY][x + player.pos.x + moveX] ||\n                    // 4. check that the cell we're moving to isn't set to 'clear'\n                    stage[y + player.pos.y + moveY][x + player.pos.x + moveX][1] !== 'clear'\n                ) {\n                    return true;\n                }\n            }\n        }\n    }\n};\n","import styled from 'styled-components';\n\nimport bgImage from '../../img/bg.png';\n\nexport const StyledTetrisWrapper = styled.div`\n    width: 100vw;\n    height: 100vh;\n    background: url(${bgImage}) #000;\n    background-size: cover;\n    overflow: hidden;\n`;\n\nexport const StyledTetris = styled.div`\n    display: flex;\n    align-items: flex-start;\n    padding: 40px;\n    margin: 0 auto;\n    max-width: 900px;\n\n    aside {\n        width: 100%;\n        max-width: 200px;\n        display: block;\n        padding: 0 20px;\n    }\n`;\n","export const TETROMINOS = {\n    0: {shape: [[0]], color: '0,0,0'},\n    I: {\n        shape: [\n            [0, 'I', 0, 0],\n            [0, 'I', 0, 0],\n            [0, 'I', 0, 0],\n            [0, 'I', 0, 0],\n        ],\n        color: '80, 227, 230',\n    },\n    J: {\n        shape: [\n            [0, 'J', 0],\n            [0, 'J', 0],\n            ['J', 'J', 0],\n        ],\n        color: '36, 93, 223',\n    },\n    L: {\n        shape: [\n            [0, 'L', 0],\n            [0, 'L', 0],\n            [0, 'L', 'L'],\n        ],\n        color: '223, 173, 36',\n    },\n    O: {\n        shape: [\n            ['O', 'O'],\n            ['O', 'O'],\n        ],\n        color: '223, 217, 36',\n    },\n    S: {\n        shape: [\n            [0, 'S', 'S'],\n            ['S', 'S', 0],\n            [0, 0, 0],\n        ],\n        color: '48, 211, 56',\n    },\n    T: {\n        shape: [\n            [0, 0, 0],\n            ['T', 'T', 'T'],\n            [0, 'T', 0],\n        ],\n        color: '132, 61, 198',\n    },\n    Z: {\n        shape: [\n            ['Z', 'Z', 0],\n            [0, 'Z', 'Z'],\n            [0, 0, 0],\n        ],\n        color: '227, 78, 78',\n    },\n};\n\nexport const randomTetromino = () => {\n    const tetrominos = 'IJLOSTZ';\n    const ranTetromino = tetrominos[Math.floor(Math.random() * tetrominos.length)];\n    return TETROMINOS[ranTetromino];\n};\n","import {useState, useEffect} from 'react';\nimport {createStage} from '../gameHelpers';\n\nexport const useStage = (player, resetPlayer) => {\n    const [stage, setStage] = useState(createStage());\n    const [rowsCleared, setRowsCleared] = useState(0);\n\n    useEffect(() => {\n        setRowsCleared(0);\n\n        const sweepRows = newStage =>\n            newStage.reduce((acc, row) => {\n                // check if the rows are filled up (not '0')\n                if (row.findIndex(cell => cell[0] === 0) === -1) {\n                    setRowsCleared(prev => prev + 1);\n                    // add new, empty row at the top\n                    acc.unshift(new Array(newStage[0].length).fill([0, 'clear']));\n                    return acc;\n                }\n                acc.push(row);\n                return acc;\n            }, []);\n\n        const updateStage = prevStage => {\n            // First flush the stage\n            const newStage = prevStage.map(row =>\n                row.map(cell => (cell[1] === 'clear' ? [0, 'clear'] : cell)),\n            );\n\n            // Then draw the tetromino\n            player.tetromino.forEach((row, y) => {\n                row.forEach((value, x) => {\n                    if (value !== 0) {\n                        newStage[y + player.pos.y][x + player.pos.x] = [\n                            value,\n                            `${player.collided ? 'merged' : 'clear'}`,\n                        ];\n                    }\n                });\n            });\n            //Then check if we collided\n            if (player.collided) {\n                resetPlayer();\n                return sweepRows(newStage);\n            }\n            return newStage;\n        };\n\n        setStage(prev => updateStage(prev));\n    }, [player, resetPlayer]);\n\n    return [stage, setStage, rowsCleared];\n};\n","import styled from 'styled-components';\n\nexport const StyledStage = styled.div`\n    display: grid;\n    grid-template-rows: repeat(\n        ${props => props.height},\n        calc(25vw / ${props => props.width})); \n    grid-template-columns: repeat(${props =>\n        props.width}, 1fr) ; grid-gap: 1px; border: 2px solid #333; width:\n            100%; max-width: 25vw; background: #111;\n    );\n`;\n","import styled from 'styled-components';\n\nexport const StyledCell = styled.div`\n    width: auto;\n    background: rgba(${props => props.color}, 0.8);\n    border: ${props => (props.type === 0 ? '0px solid' : '4px solid')};\n    border-bottom-color: rgba(${props => props.color}, 0.1);\n    border-right-color: rgba(${props => props.color}, 1);\n    border-top-color: rgba(${props => props.color}, 1);\n    border-left-color: rgba(${props => props.color}, 0.3);\n`;\n","import React from 'react';\nimport {StyledCell} from './styles/StyledCell';\nimport {TETROMINOS} from '../tetrominos';\n\nconst Cell = ({type}) => <StyledCell type={type} color={TETROMINOS[type].color} />;\n\n// react will memorise this component and only rerenders when it changes\nexport default React.memo(Cell);\n","import React from 'react';\nimport {StyledStage} from './styles/StyledStage';\n\nimport Cell from './Cell';\n\nconst Stage = ({stage}) => (\n    <StyledStage width={stage[0].length} height={stage.length}>\n        {stage.map(row => row.map((cell, x) => <Cell key={x} type={cell[0]} />))}\n    </StyledStage>\n);\n\nexport default Stage;\n","import styled from 'styled-components';\n\nexport const StyledDisplay = styled.div`\n    box-sizing: border-box;\n    displayL flex;\n    align-items: center;\n    margin: 0 0 20px 0;\n    padding: 20px;\n    border: 4px solid #333;\n    min-height: 30px;\n    width: 100%;\n    border-radius: 20px;\n    color: ${props => (props.gameOver ? 'red' : '#999')}\n    background: #000\n    font-family: Pixel, Arial, Helvetica, sans-serif;\n    font-size: 0.8rem;\n`;\n","import React from 'react';\nimport {StyledDisplay} from './styles/StyledDisplay';\n\nconst Display = ({gameOver, text}) => <StyledDisplay gameOver={gameOver}>{text}</StyledDisplay>;\n\nexport default Display;\n","import styled from 'styled-components';\n\nexport const StyledStartButton = styled.button`\n    box-sizing: border-box;\n    margin: 0 0 20px 0;\n    padding: 20px;\n    min-height: 30px;\n    width: 100%;\n    border-radius: 20px;\n    border: none;\n    color: white;\n    background: #333;\n    font-family: Pixel, Arial, Helvetica, sans-serif;\n    fontsize: 1rem;\n    outline: none;\n    cursor: pointer;\n    :hover {\n        background: #a30a00;\n    }\n`;\n","import React from 'react';\nimport {StyledStartButton} from './styles/StyledStartButton';\n\nconst StartButton = ({callback, text}) => (\n    <StyledStartButton onClick={callback}>{text}</StyledStartButton>\n);\n\nexport default StartButton;\n","import styled from 'styled-components';\nimport bgImage from '../../img/bg.png';\n\nexport const StyledTetrisWrapper = styled.div`\n    width: 100vw;\n    height: 100vh;\n    background: url(${bgImage}) #000;\n    background-size: cover;\n    overflow: hidden;\n`;\n\nexport const StyledScoreBoard = styled.div`\n\n    border: 2px solid #333; \n    border-color: white;\n    width:100%; \n    max-width: 90vw; \n    background: #111;\n    box-sizing: border-box;\n    padding: 10px;\n    margin: 30px;\n    border-radius: 20px;\n    color: white;\n    background: #333;\n    font-family: Pixel, Arial, Helvetica, sans-serif;\n    font-size: 1rem;\n    );\n`;\n\nexport const StyledScoreTable = styled.div`\n    text-align: center;\n    width: 80vw;\n    padding: 10px 10px 10px 10px;\n    margin-left: auto;\n    margin-right: auto;\n\n    th {\n        padding: 15px;\n        text-align: center;\n        color: yellow;\n    }\n\n    tr {\n        padding: 15px;\n        text-align: center;\n        line-height: 1.5;\n    }\n\n    .rank {\n        color: orange;\n    }\n\n    #ranking {\n        color: red;\n        line-height: 2;\n    }\n`;\n","import styled from 'styled-components';\n\nexport const StyledBackButton = styled.button`\n    box-sizing: border-box;\n    height: 50px;\n    max-width: 35%;\n    width: 100%;\n    border-radius: 20px;\n    border-width: 0.5rem;\n    border-color: white;\n    color: yellowgreen;\n    padding: 5px 5px 5px 5px;\n    font-family: Pixel, Arial, Helvetica, sans-serif;\n    font-size: 18px;\n    outline: none;\n    cursor: pointer;\n    background: black;\n    :hover {\n        background: #333;\n    }\n`;\n","import React from 'react';\nimport {StyledBackButton} from './styles/StyledBackButton';\n\nconst BackButton = ({text}) => <StyledBackButton>{text}</StyledBackButton>;\n\nexport default BackButton;\n","import React, {useState, useEffect} from 'react';\nimport {useRoutes, A} from 'hookrouter';\nimport Routes from '../Routes';\n\nimport BackButton from './BackButton';\n\nconst DOMAIN = 'tetris.fyr.fyi';\n\nconst ScoreTable = () => {\n    const [topScoreBoard, setTopScoreBoard] = useState([]);\n    const [rank, setRank] = useState();\n\n    const fetchTopScoresData = async () => {\n        try {\n            let response = await fetch(`https://${DOMAIN}/topscores`);\n            let topScores = await response.json();\n            setTopScoreBoard(topScores['topScores']);\n        } catch (err) {\n            console.error(err);\n        }\n    };\n\n    const makeTwoDigits = n => {\n        if (n < 10) {\n            n = n.toString();\n            n = '0' + n;\n        }\n        return n;\n    };\n\n    const convertDate = fullDateTime => {\n        let date = new Date(fullDateTime);\n        let yr = date.getFullYear();\n        let mth = date.getMonth() + 1;\n        let day = date.getDate();\n        let hr = date.getHours();\n        let min = date.getMinutes();\n        let sec = date.getSeconds();\n        mth = makeTwoDigits(mth);\n        hr = makeTwoDigits(hr);\n        min = makeTwoDigits(min);\n        sec = makeTwoDigits(sec);\n        return yr + '-' + mth + '-' + day + ' / ' + hr + '-' + min + '-' + sec;\n    };\n\n    const renderTableData = () => {\n        return topScoreBoard.map((topPlayer, index) => {\n            const {player_name, score, date_time} = topPlayer;\n            return (\n                <tr key={index}>\n                    <td className=\"rank\">{index + 1}</td>\n                    <td>{player_name}</td>\n                    <td>{score}</td>\n                    <td>{convertDate(date_time)}</td>\n                </tr>\n            );\n        });\n    };\n\n    const renderTableHeader = () => {\n        let header = ['Rank', `Player's Name`, 'Score', `Date / Time`];\n        return header.map((item, index) => {\n            return <th key={index}>{item}</th>;\n        });\n    };\n\n    const fetchRank = async () => {\n        try {\n            let response = await fetch(`https://${DOMAIN}/rankscores`);\n            let rank = await response.json();\n            rank = rank['rank'][0]['COUNT(*)'] + 1;\n            setRank(rank);\n            showRank(rank);\n        } catch (err) {\n            console.error(err);\n        }\n    };\n\n    const showRank = ranking => {\n        if (rank > 10) {\n            return `Oops! You need to beat ${rank - 1} more records to get on the Chart...`;\n        } else {\n            return `Congratulations! Your ranking is ${rank}!`;\n        }\n    };\n\n    useRoutes(Routes);\n\n    useEffect(() => {\n        fetchTopScoresData();\n        fetchRank();\n    }, []);\n\n    return (\n        <div>\n            <div>\n                <h2 id=\"title\">Top Scores</h2>\n                <table id=\"topScoreBoard\">\n                    <tbody>\n                        <tr>{renderTableHeader()}</tr>\n                        {renderTableData()}\n                    </tbody>\n                </table>\n            </div>\n            <div>\n                <h3 id=\"ranking\">{showRank()}</h3>\n            </div>\n            <div>\n                <br />\n                <A href=\"/\">\n                    <BackButton text=\"Take me back!\" />\n                </A>\n            </div>\n        </div>\n    );\n};\n\nexport default ScoreTable;\n","import React from 'react';\nimport {StyledScoreBoard} from './styles/StyledScoreBoard';\nimport {StyledScoreTable} from './styles/StyledScoreBoard';\nimport {StyledTetrisWrapper} from './styles/StyledTetris';\nimport ScoreTable from './ScoreTable';\n\nconst ScoreBoard = ({scoreBoard}) => (\n    <StyledTetrisWrapper>\n        <StyledScoreBoard>\n            <StyledScoreTable>\n                <ScoreTable />\n            </StyledScoreTable>\n        </StyledScoreBoard>\n    </StyledTetrisWrapper>\n);\n\nexport default ScoreBoard;\n","import styled from 'styled-components';\n\nexport const StyledEnterName = styled.div`\n    box-sizing: border-box;\n    margin: 0 0 20px 0;\n    padding: 20px;\n    width: 100%;\n    border-radius: 20px;\n    text-align:center;\n    border: white;\n    color: white;\n    background: #333;\n    font-family: Pixel, Arial, Helvetica, sans-serif;\n    fontsize: 1rem;\n    outline: none;\n    cursor: pointer;\n    );\n`;\n","import React, {useState, useContext, useEffect, useRef} from 'react';\nimport {ScoreContext} from './Tetris';\nimport ScoreBoard from './ScoreBoard';\nimport ScoreTable from './ScoreTable';\n\nimport {navigate} from 'hookrouter';\n\nimport {StyledEnterName} from './styles/StyledEnterName';\n// import {Redirect, Link} from 'react-router-dom';\n\nconst PORT = 8080;\nconst DOMAIN = 'tetris.fyr.fyi';\n\nconst EnterName = () => {\n    const score = useContext(ScoreContext);\n    const [input, setInput] = useState('Player');\n    const [save, setSave] = useState(false);\n\n    const refPreventFirstFire = useRef(true);\n\n    const makeTwoDigits = n => {\n        if (n < 10) {\n            n = n.toString();\n            n = '0' + n;\n        }\n        return n;\n    };\n    const getDateTime = () => {\n        let tsNow = Date.now();\n        let today = new Date(tsNow);\n        let yr = today.getFullYear();\n        let mth = today.getMonth() + 1;\n        let day = today.getDate();\n        let hr = today.getHours();\n        let min = today.getMinutes();\n        let sec = today.getSeconds();\n        hr = makeTwoDigits(hr);\n        min = makeTwoDigits(min);\n        sec = makeTwoDigits(sec);\n        let dateTime = `${yr}-${mth}-${day} ${hr}:${min}:${sec}`;\n        console.log(dateTime);\n        return dateTime;\n    };\n\n    const savePlayersName = async () => {\n        try {\n            const nameScoreTimeToSave = {\n                playersName: input,\n                playersScore: score,\n                dateTime: getDateTime(),\n            };\n            let response = await fetch(`https://${DOMAIN}/scores`, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify(nameScoreTimeToSave),\n            });\n            return await response.json();\n        } catch (err) {\n            console.error(err);\n        }\n    };\n\n    const handleChange = e => {\n        setInput(e.target.value);\n    };\n\n    const handleSubmit = e => {\n        e.preventDefault();\n        savePlayersName();\n        setSave(true);\n        return () => {\n            return ScoreTable();\n        };\n    };\n\n    useEffect(() => {\n        if (refPreventFirstFire.current) {\n            refPreventFirstFire.current = false;\n            return;\n        }\n        if (save) navigate('/scoreboard');\n    }, [save]);\n\n    return (\n        <StyledEnterName>\n            <form onSubmit={handleSubmit}>\n                <label>Enter Player's Name:</label>\n                <input name=\"Players Name\" value={input} type=\"text\" onChange={handleChange} />\n                <input type=\"submit\" value=\"OK!\" />\n            </form>\n        </StyledEnterName>\n    );\n};\n\nexport default EnterName;\n","import React, {useState} from 'react';\nimport {createStage, checkCollision} from '../gameHelpers';\n\n// Styled Components\nimport {StyledTetrisWrapper, StyledTetris} from './styles/StyledTetris';\n\n//Custom Hooks\nimport {useInterval} from '../hooks/useInterval';\nimport {usePlayer} from '../hooks/usePlayer';\nimport {useStage} from '../hooks/useStage';\nimport {useGameStatus} from '../hooks/useGameStatus';\n\n// Components\nimport Stage from './Stage';\nimport Display from './Display';\nimport StartButton from './StartButton';\nimport EnterName from './EnterName';\n\nconst Tetris = () => {\n    const [dropTime, setDropTime] = useState(null);\n    const [gameOver, setGameOver] = useState(false);\n    const [startPauseResume, setStartPauseResume] = useState('Start Game');\n    const [resumeDropTime, setResumeDropTime] = useState(null);\n\n    // const [startPause, setStartPause] = useState('Start Game');\n\n    const [player, updatePlayerPos, resetPlayer, playerRotate] = usePlayer();\n    const [stage, setStage, rowsCleared] = useStage(player, resetPlayer);\n    const [score, setScore, rows, setRows, level, setLevel] = useGameStatus(rowsCleared);\n\n    const movePlayer = dir => {\n        if (!checkCollision(player, stage, {x: dir, y: 0})) {\n            updatePlayerPos({x: dir, y: 0});\n        }\n    };\n\n    const changeButton = () => {\n        switch (startPauseResume) {\n            case 'Start Game':\n                setStartPauseResume('Pause');\n                startGame();\n                break;\n            case 'Pause':\n                setStartPauseResume('Resume');\n                pauseGame();\n                break;\n            case 'Resume':\n                setStartPauseResume('Pause');\n                resumeGame();\n                break;\n            case 'Try Again?':\n                setStartPauseResume('Pause');\n                startGame();\n                break;\n        }\n    };\n\n    const startGame = () => {\n        setStage(createStage());\n        setDropTime(1000);\n        setResumeDropTime(1000);\n        resetPlayer();\n        setGameOver(false);\n        setScore(0);\n        setRows(0);\n        setLevel(0);\n        console.log(dropTime);\n        console.log(resumeDropTime);\n    };\n\n    const pauseGame = () => {\n        console.log(dropTime);\n        console.log(resumeDropTime);\n        setResumeDropTime(dropTime);\n        setDropTime(null);\n    };\n\n    const resumeGame = () => {\n        setDropTime(resumeDropTime);\n        console.log(resumeDropTime);\n    };\n\n    const drop = () => {\n        // increase level when player has cleared e.g. 10/+ rows\n        if (rows >= (level + 1) * 5) {\n            setLevel(level + 1);\n            // increase speed when level increases (random formula)\n            setDropTime(1000 - (level + 1) * 10);\n            // setResumeDropTime(dropTime);\n        }\n        if (!checkCollision(player, stage, {x: 0, y: 1})) {\n            updatePlayerPos({x: 0, y: 1, collided: false});\n        } else {\n            //Game Over\n            if (player.pos.y < 1) {\n                console.log('GAME OVER!!!!!');\n                setGameOver(true);\n                setDropTime(null);\n                setStartPauseResume('Try Again?');\n            }\n            updatePlayerPos({x: 0, y: 0, collided: true});\n        }\n    };\n\n    const keyUp = ({keyCode}) => {\n        if (!gameOver) {\n            if (keyCode === 40) {\n                setDropTime(1000 - (level + 1) * 10);\n                console.log(dropTime);\n            }\n        }\n    };\n\n    const dropPlayer = () => {\n        setDropTime(null);\n        drop();\n    };\n\n    const move = ({keyCode}) => {\n        if (!gameOver) {\n            // LEFT\n            if (keyCode === 37) {\n                movePlayer(-1);\n                // RIGHT\n            } else if (keyCode === 39) {\n                movePlayer(1);\n                // DOWN\n            } else if (keyCode === 40) {\n                dropPlayer();\n                // UP\n            } else if (keyCode === 38) {\n                playerRotate(stage, 1);\n            }\n        }\n    };\n\n    useInterval(() => {\n        drop();\n    }, dropTime);\n\n    return (\n        <div>\n            <StyledTetrisWrapper\n                role=\"button\"\n                tabIndex=\"0\"\n                onKeyDown={e => move(e)}\n                onKeyUp={keyUp}>\n                <StyledTetris>\n                    <ScoreContext.Provider value={score}>\n                        <Stage stage={stage} />\n                        <aside>\n                            {gameOver ? (\n                                <div>\n                                    <Display gameOver={gameOver} text=\"Game Over :)\" />\n                                    <EnterName />\n                                </div>\n                            ) : (\n                                <div></div>\n                            )}\n                            <div>\n                                <Display text={`Score: ${score}`} />\n                                <Display text={`Rows: ${rows}`} />\n                                <Display text={`Level: ${level}`} />\n                                <StartButton callback={changeButton} text={startPauseResume} />\n                            </div>\n                        </aside>\n                    </ScoreContext.Provider>\n                </StyledTetris>\n            </StyledTetrisWrapper>\n        </div>\n    );\n};\n\nexport default Tetris;\nexport const ScoreContext = React.createContext(Tetris.score);\n","import {useState, useCallback} from 'react';\n// useState will return an array with 2 items: actual state & setter for the state\nimport {TETROMINOS, randomTetromino} from '../tetrominos';\nimport {STAGE_WIDTH, checkCollision} from '../gameHelpers';\n// always use 'use' at the beginning of hooks\n\nexport const usePlayer = () => {\n    const [player, setPlayer] = useState({\n        pos: {x: 0, y: 0},\n        tetromino: TETROMINOS[0].shape,\n        collided: false,\n    });\n\n    const rotate = (matrix, dir) => {\n        // make the rows become cols (transpose)\n        const rotatedTetro = matrix.map((_, index) => matrix.map(col => col[index]));\n\n        //reverse each row to get a rotated matrix\n        if (dir > 0) return rotatedTetro.map(row => row.reverse());\n        return rotatedTetro.reverse();\n    };\n\n    const playerRotate = (state, dir) => {\n        // collission prevention during rotation\n        const clonedPlayer = JSON.parse(JSON.stringify(player)); //deep clone\n        clonedPlayer.tetromino = rotate(clonedPlayer.tetromino, dir);\n\n        const pos = clonedPlayer.pos.x;\n        let offset = 1;\n        while (checkCollision(clonedPlayer, state, {x: 0, y: 0})) {\n            clonedPlayer.pos.x += offset;\n            //back and forth movement to check for collision\n            offset = -(offset + (offset > 0 ? 1 : -1));\n            if (offset > clonedPlayer.tetromino[0].length) {\n                //rotate it back\n                rotate(clonedPlayer.tetromin, -dir);\n                clonedPlayer.pos.x = pos;\n                return;\n            }\n        }\n        setPlayer(clonedPlayer);\n    };\n\n    const updatePlayerPos = ({x, y, collided}) => {\n        setPlayer(prev => ({\n            ...prev,\n            pos: {x: (prev.pos.x += x), y: (prev.pos.y += y)},\n            collided,\n        }));\n    };\n\n    const resetPlayer = useCallback(() => {\n        setPlayer({\n            pos: {x: STAGE_WIDTH / 2 - 2, y: 0},\n            tetromino: randomTetromino().shape,\n            collided: false,\n        });\n    }, []);\n\n    return [player, updatePlayerPos, resetPlayer, playerRotate];\n};\n","import {useState, useEffect, useCallback} from 'react';\n\nexport const useGameStatus = rowsCleared => {\n    const [score, setScore] = useState(0);\n    const [rows, setRows] = useState(0);\n    const [level, setLevel] = useState(0);\n\n    const linePoints = [40, 100, 300, 1200];\n\n    const calcScore = useCallback(() => {\n        //check if we have score\n        if (rowsCleared > 0) {\n            setScore(prev => prev + linePoints[rowsCleared - 1] * (level + 1));\n            setRows(prev => prev + rowsCleared);\n        }\n    }, [level, linePoints, rowsCleared]); // callBack dependencies --> fires when these values are changed\n\n    useEffect(() => {\n        calcScore();\n    }, [calcScore, rowsCleared, score]);\n\n    return [score, setScore, rows, setRows, level, setLevel];\n};\n","import { useEffect, useRef } from 'react';\n\nexport function useInterval(callback, delay) {\n  const savedCallback = useRef();\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      const id = setInterval(tick, delay);\n      return () => {\n        clearInterval(id);\n      };\n    }\n  }, [delay]);\n}\n","import React from 'react';\n\nimport Tetris from './components/Tetris';\nimport ScoreBoard from './components/ScoreBoard';\n\nconst Routes = {\n    '/': () => (\n        <div className=\"App\">\n            <Tetris />\n        </div>\n    ),\n    '/scoreboard': () => <ScoreBoard />,\n};\n\nexport default Routes;\n","import React from 'react';\n\n// import {BrowserRouter as Router, Route, Switch, Redirect} from 'react-router-dom';\nimport {useRoutes} from 'hookrouter';\nimport Routes from './Routes';\n\nconst App = () => useRoutes(Routes);\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n","module.exports = __webpack_public_path__ + \"static/media/bg.2810fe6b.png\";"],"sourceRoot":""}